% assignment5.m
% Author: Lorenzo Busellato
%
% This script implements the computation of the homographies for a pair of
% stereo images. The homographies are then used to rectify both images,
% showing that the known 3D points are projected to the same places in the
% rectified images as in the original images. Then 5 random points are
% picked to draw epipolar lines on the rectified left image, showing that
% the epipolar lines now become horizontal and parallel to each other.

%% SETUP
clearvars;
close all;
clc;
addpath("./calib/");
% Load in the calibration data generated by the Camera Calibration Toolbox
stereo = load('calib/Calib_Results_stereo.mat');
% Load in the images
imgl = im2gray(imread('calib/left01.jpg'));
imgr = im2gray(imread('calib/right01.jpg'));
% Show the images
fig1 = figure();
sl = subplot(221); imshow(imgl); hold on; title('Left image');
sr = subplot(222); imshow(imgr); hold on; title('Right image');
slr = subplot(223); title('Rectified left image');
srr = subplot(224); title('Rectified right image');
fig2 = figure();
slre = subplot(121); title('Random points');
srre = subplot(122); title('Epipolar lines of the random points');
% Known 3D points in the world reference frame:
M = stereo.X_left_1;
M = [M; ones(1, size(M, 2))];

%% COMPUTATION OF THE FULL PERSPECTIVE MATRICES
% Compute the left camera perspective matrix:
Rl = rodrigues(stereo.omc_left_1);
tl = stereo.Tc_left_1;
Gl = [Rl, tl; 0 0 0 1];
Kl = stereo.KK_left;
Pl = Kl * [eye(3) zeros(3, 1)] * Gl;
% Compute the right camera perspective matrix:
Rr = stereo.R;
tr = stereo.T;
Gr = [Rr tr; 0 0 0 1];
Kr = stereo.KK_right;
Pr = Kr * [eye(3) zeros(3, 1)] * Gr;

%% PROJECTION OF THE KNOWN 3D POINTS
% Project the known 3D points onto both images
Ml = Pl * M;
ml = [ Ml(1, :)./Ml(3, :);
       Ml(2, :)./Ml(3, :)];
Mr = Pr * Gl * M;
mr = [ Mr(1, :)./Mr(3, :);
       Mr(2, :)./Mr(3, :)
    ];
figure(fig1);
% Plot the points on the images
subplot(sl); hold on;
plot(ml(1, :), ml(2, :), 'g+');
subplot(sr); hold on;
plot(mr(1, :), mr(2, :), 'r+');

%% COMPUTATION OF THE HOMOGRAPHIES
% Q-q factorization of the perspective matrices:
Qr = Pr(:, 1:3);
qr = Pr(:, 4);
% Perspective matrix with world reference frame coincident with the left
% cameras'
Pg = stereo.KK_left * [eye(3) zeros(3, 1)];
Ql = Pg(:, 1:3);
ql = Pg(:, 4);
% Optical centers of the two images
Cl = -inv(Ql) * ql;
Cr = -inv(Qr) * qr;
% Computation of the R matrix
r1 = ((Cr - Cl)/norm(Cr - Cl)).';
% k is the original z axis
k = [0 0 1];
r2 = cross(k, r1);
r3 = cross(r1, r2);
R = [r1./norm(r1); r2./norm(r2); r3./norm(r3)];
% Computation of the new perspective matrices
Pnl = Kl * [R (-R * Cl)];
Pnr = Kl * [R (-R * Cr)];
% Q factors of the new perspective matrices
Qnl = Pnl(:, 1:3);
qnl = Pnl(:, 4);
Qnr = Pnr(:, 1:3);
qnr = Pnr(:, 4);
% Computation of the homographies
Hl = Qnl / Ql;
Hr = Qnr / Qr;

%% IMAGE RECTIFICATION
% Applying the homographies to the known points
Mlr = Hl * Ml;
mlr(1, :) = Mlr(1, :)./Mlr(3, :);
mlr(2, :) = Mlr(2, :)./Mlr(3, :);
Mrr = Hr * Mr;
mrr(1, :) = Mrr(1, :)./Mrr(3, :);
mrr(2, :) = Mrr(2, :)./Mrr(3, :);
% Image rectification
imglr = uint8(imwarp(imgl, Hl));
imgrr = uint8(imwarp(imgr, Hr));
figure(fig1);
% Plot the points onto the rectified images
subplot(slr); hold on; imshow(imglr); hold on;
plot(mlr(1, :), mlr(2, :), 'g*');
subplot(srr); hold on; imshow(imgrr); hold on;
plot(mrr(1, :), mrr(2, :), 'r*');

%% EPIPOLAR LINES FOR THE LEFT IMAGE
% Compute the epipole for the left image
e = -(Qnr / Qnl) * qnl + qnr;
% Compute the fundamental matrix
F = [  0  -e(3) e(2);
      e(3)  0  -e(1);
     -e(2) e(1)  0] * (Qnr / Qnl);
F = F./norm(F);
figure(fig2);
% Pick five random points to draw the epipolar lines of
p = randperm(size(mrr, 2), 5);
subplot(slre); hold on; imshow(imglr); hold on;
scatter(mlr(1, p), mlr(2, p), 'g*');
subplot(srre); hold on; imshow(imgrr); hold on;
% Compute and plot each of the picked points' epipolar line 
x = 1:size(imgrr, 2);
for i = p
    l = F * Mlr(:, i);
    y = -(x * l(1) + l(3)) / l(2);
    scatter(mrr(1, i), mrr(2, i), 'r*'); hold on;
    plot(x, y);
end